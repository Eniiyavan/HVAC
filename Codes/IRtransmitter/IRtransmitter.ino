#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <DHT.h>

#define DHTPIN D4     // Pin connected to the data pin of DHT11
#define DHTTYPE DHT11 
#define BUZZER_PIN D3 

const uint16_t kIrLed = 4;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).
DHT dht(DHTPIN,DHTTYPE);
IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.

// Example of data captured by IRrecvDumpV2.ino
uint16_t rawData25[200] = {3228, 3130,  476, 340,  498, 332,  472, 392,  468, 1122,  470, 344,  492, 1118,  478, 336,  472, 392,  472, 336,  498, 340,  498, 1120,  472, 342,  492, 344,  494, 1118,  474, 1122,  470, 1124,  470, 1120,  478, 332,  500, 340,  468, 1150,  468, 1122,  448, 390,  470, 1118,  476, 340,  494, 344,  468, 392,  466, 348,  466, 388,  470, 342,  468, 392,  444, 392,  468, 344,  494, 338,  496, 344,  466, 392,  442, 392,  444, 394,  466, 348,  490, 336,  498, 340,  470, 390,  472, 338,  470, 390,  444, 390,  442, 396,  466, 346,  490, 346,  492, 342,  494, 1120,  448, 390,  468, 346,  486, 1128,  470, 1122,  472, 340,  494, 1120,  474, 338,  496, 342,  492, 344,  496, 336,  470, 392,  472, 338,  496, 340,  470, 390,  472, 338,  470, 392,  462, 358,  458, 392,  442, 392,  444, 392,  468, 344,  492, 342,  494, 342,  494, 1114,  482, 334,  500, 338,  474, 388,  464, 354,  486, 344,  492, 344,  490, 348,  488, 1120,  476, 342,  494, 338,  470, 392,  446, 1146,  470, 344,  466, 1150,  470, 1122,  446, 392,  442, 1148,  470, 344,  494, 340,  492, 350,  486, 346,  468, 388,  474, 1114,  476};
uint16_t rawData23[200] = {3222, 3132,  448, 390,  442, 392,  468, 344,  492, 1124,  444, 392,  444, 1148,  468, 342,  494, 340,  472, 390,  444, 390,  470, 1122,  472, 338,  470, 392,  444, 1150,  444, 1146,  472, 1122,  446, 392,  444, 1148,  470, 1122,  472, 1120,  446, 1146,  448, 390,  470, 1122,  472, 336,  498, 342,  494, 338,  494, 344,  494, 338,  472, 392,  466, 346,  468, 390,  470, 340,  496, 338,  472, 392,  468, 344,  492, 340,  496, 340,  500, 334,  500, 338,  472, 392,  470, 342,  494, 340,  496, 338,  498, 336,  498, 340,  496, 338,  496, 340,  496, 342,  472, 1144,  472, 336,  496, 344,  490, 1124,  448, 1144,  446, 1150,  472, 338,  498, 336,  496, 346,  492, 338,  500, 334,  500, 340,  494, 344,  520, 278,  530, 344,  494, 340,  498, 336,  498, 344,  464, 394,  444, 392,  446, 390,  470, 338,  494, 346,  494, 336,  470, 1146,  474, 340,  484, 366,  480, 342,  490, 348,  492, 338,  496, 340,  494, 342,  468, 1148,  472, 340,  468, 392,  470, 340,  496, 1118,  446, 394,  470, 1120,  446, 1146,  448, 392,  466, 1124,  444, 394,  466, 348,  490, 342,  492, 344,  468, 392,  470, 1116,  450};

uint16_t rawData21[200] = {3196, 3158,  474, 340,  470, 390,  460, 360,  486, 1120,  472, 338,  494, 1126,  474, 334,  474, 390,  444, 392,  470, 338,  498, 1122,  466, 348,  466, 390,  468, 1124,  474, 1120,  446, 1148,  470, 340,  496, 1122,  446, 390,  470, 1122,  446, 1148,  470, 336,  500, 1122,  446, 390,  472, 336,  472, 392,  470, 336,  474, 390,  444, 392,  444, 390,  444, 392,  498, 272,  508, 394,  444, 392,  468, 340,  470, 392,  470, 336,  500, 340,  470, 390,  474, 332,  500, 338,  498, 340,  472, 390,  470, 338,  472, 388,  472, 336,  500, 336,  472, 392,  470, 1122,  472, 336,  472, 390,  470, 1122,  472, 1122,  446, 1148,  470, 340,  496, 1122,  470, 340,  496, 338,  498, 336,  500, 334,  502, 336,  498, 340,  474, 386,  446, 390,  470, 338,  472, 390,  444, 392,  470, 340,  472, 390,  446, 390,  472, 334,  498, 342,  496, 1122,  470, 344,  494, 340,  496, 338,  496, 340,  496, 338,  496, 344,  468, 392,  470, 1120,  448, 390,  462, 358,  460, 392,  470, 1122,  472, 336,  474, 1146,  472, 1122,  474, 336,  474, 1146,  472, 340,  496, 338,  498, 336,  498, 342,  494, 338,  492, 348,  464};

uint16_t rawData19[200] = {3238, 3112,  494, 350,  488, 346,  464, 392,  468, 1116,  454, 392,  466, 1124,  472, 342,  490, 352,  460, 394,  470, 342,  464, 1134,  458, 396,  470, 344,  464, 1140,  456, 1144,  470, 1110,  460, 394,  466, 350,  462, 1134,  458, 1146,  474, 1108,  482, 346,  486, 1120,  480, 336,  468, 394,  440, 394,  444, 394,  440, 394,  470, 340,  466, 394,  470, 338,  492, 350,  484, 354,  458, 394,  466, 348,  490, 340,  496, 342,  480, 370,  476, 346,  488, 348,  462, 392,  466, 354,  462, 390,  442, 392,  466, 350,  462, 392,  444, 394,  442, 394,  462, 1126,  446, 394,  466, 1120,  472, 354,  488, 338,  470, 394,  466, 350,  488, 344,  466, 394,  468, 344,  490, 350,  462, 392,  442, 394,  466, 350,  486, 346,  488, 350,  486, 346,  466, 392,  466, 350,  484, 352,  460, 394,  440, 396,  438, 398,  442, 392,  466, 1108,  460, 394,  464, 356,  458, 392,  466, 348,  486, 350,  460, 394,  442, 394,  468, 1108,  484, 350,  460, 396,  466, 350,  460, 1132,  460, 396,  466, 1110,  458, 1144,  450, 394,  442, 394,  466, 1108,  460, 1142,  452, 394,  468, 350,  486, 1120,  472, 354,  482};  

uint16_t rawData28[200] = {3192, 3154,  456, 390,  442, 408,  438, 390,  438, 1132,  478, 344,  452, 1136,  460, 398,  466, 408,  434, 362,  458, 384,  458, 1104,  446, 398,  446, 386,  470, 1158,  422, 1154,  440, 1164,  444, 1116,  470, 1146,  446, 410,  422, 396,  446, 1118,  472, 406,  436, 1112,  474, 372,  456, 412,  440, 380,  424, 482,  394, 398,  404, 402,  452, 422,  432, 362,  464, 362,  472, 352,  470, 398,  442, 384,  426, 416,  474, 398,  436, 378,  432, 358,  470, 388,  420, 392,  478, 416,  436, 378,  406, 390,  472, 388,  420, 390,  468, 440,  400, 406,  460, 1146,  402, 424,  414, 1160,  446, 356,  446, 392,  444, 448,  420, 1116,  446, 424,  412, 422,  448, 392,  436, 418,  434, 372,  414, 416,  420, 394,  472, 384,  444, 366,  446, 416,  420, 416,  468, 362,  468, 376,  444, 386,  448, 416,  414, 378,  444, 424,  410, 1166,  420, 390,  460, 402,  418, 392,  472, 372,  440, 432,  438, 390,  436, 400,  440, 1144,  434, 414,  438, 408,  420, 396,  446, 1142,  434, 384,  450, 1160,  448, 1146,  458, 366,  458, 392,  416, 1172,  446, 1144,  438, 1158,  420, 1154,  498, 362,  444, 1120,  468};

float temperature=30;

void setup() {
  irsend.begin();
  Serial.begin(115200);
  dht.begin();
  pinMode(BUZZER_PIN,OUTPUT);
  
 


}

void loop() {
  
  
  
  if(Serial.available()) {
    char person=Serial.read();
     temperature = dht.readTemperature();
    
    if(person=='0' ){
        irsend.sendRaw(rawData28, 200, 38);
        
        Serial.println("Temp SET:28");
         Serial.println("Temperature: ");
  Serial.print(temperature);
      
    }
    else if(person=='1' || person=='2' ){
        irsend.sendRaw(rawData25, 200, 38);
        
        Serial.println("Temp SET:25");
         Serial.println("Temperature: ");
  Serial.print(temperature);

    }
    else if((person=='3' || person=='4' ) && temperature>26){
        irsend.sendRaw(rawData23, 200, 38);
        
        Serial.println("Temp SET:23");
       Serial.println("Temperature: ");
  Serial.print(temperature);
    }
    else if((person=='5' || person=='6') && temperature>24){
        irsend.sendRaw(rawData21, 200, 38);
        
        Serial.println("Temp SET:21");
         Serial.println("Temperature: ");
  Serial.print(temperature);
    }
    else if((person=='7' || person=='8') && temperature>22){
        irsend.sendRaw(rawData19, 200, 38);
        
        Serial.println("Temp SET:19");
         Serial.println("Temperature: ");
  Serial.print(temperature);
    }
    else if(person=='9' || person=='10' || person=='11'){
            playSuperMarioTheme();

  

           delay(2000);
    }
    delay(1000);
    }
  
    
    
        
        
    
    
  
  
  
 
  
  
 
}
void playSuperMarioTheme() {
  int melody[] = {
    // Notes of the melody (frequency in Hz)
    659, 659, 0, 659, 0, 523, 659, 0, 784, 0, 392, 523, 0, 392, 523, 0,
    
  };

  int noteDuration = 200; // Duration of each note in milliseconds

  // Play each note of the melody
  for (int note = 0; note < sizeof(melody) / sizeof(melody[0]); note++) {
    if (melody[note] != 0) {
      tone(BUZZER_PIN, melody[note], noteDuration);
    }
    delay(noteDuration * 1.3); // Add a small delay between notes
    noTone(BUZZER_PIN); // Stop playing the note
  }
}